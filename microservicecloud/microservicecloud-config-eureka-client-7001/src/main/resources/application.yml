server:
  port: 7001
eureka:
  instance:
    hostname: localhost #eureka服务实例名称
  client:
    register-with-eureka: false #false表示不向注册中心注册自己。
    fetch-registry: false #false表示自己就是注册中心，我的职责就是维护服务实例，并不需要检索服务
    service-url:
      defaulZone: http://${eureka.instance.hostname}:${server.port}/eureka/ #设置与Eureka Server交互的地址查询服务和注册服务都需要依赖这个地址
#  server:
#    enable-replicated-request-compression: false
      #在自我保护模式中，Eureka Server会保护服务注册表中的信息，不再注销任何服务实例。当它收到的心跳数重新恢复到阀值以上时，该Eureka Server节点就会自动退出自我保护模式。
      #它的设计哲学就是宁可保留错误的服务注册信息，也不盲目的注销任何可能健康的服务实例。
      #综上 eureka 自我保护模式是一种对应网络异常的安全措施，它的架构哲学 是宁可同时保留所有微服务（健康的微服务和不健康的微服务都会保留），也不盲目注销任何健康的微服务。
      #使用自我保护模式，可以让eureka集群更加健壮，稳定。
      #在spring Cloud 中，可以使用eureka.server.enable-self-preservation = false 禁止自我保护模式。
